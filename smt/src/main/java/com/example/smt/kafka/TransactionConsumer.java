package com.example.smt.kafka;

import com.example.smt.entity.Enum.EtatTransaction;
import com.example.smt.entity.Transaction;
import com.example.smt.repository.TransactionRepository;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

import java.util.Optional;
@Service
public class TransactionConsumer {
    private final TransactionRepository transactionRepository;

    public TransactionConsumer(TransactionRepository transactionRepository) {
        this.transactionRepository = transactionRepository;
    }

    @KafkaListener(topics = "transaction-approuvee", groupId = "smt-group")
    public void handleTransactionApproved(TransactionEvent transactionEvent) {
        System.out.println("‚úÖ Transaction approuv√©e re√ßue : ID " + transactionEvent.getIdTransaction());

        Optional<Transaction> transactionOpt = transactionRepository.findById(transactionEvent.getIdTransaction());
        if (transactionOpt.isPresent()) {
            Transaction transaction = transactionOpt.get();
            transaction.setEtat(EtatTransaction.APPROUV√âE);
            transactionRepository.save(transaction);
            System.out.println("‚úÖ Transaction mise √† jour en APPROUV√âE en base !");
        } else {
            System.err.println("‚ö†Ô∏è Transaction non trouv√©e en base pour l'ID : " + transactionEvent.getIdTransaction());
        }
    }

    @KafkaListener(topics = "transaction-rejetee-solde", groupId = "smt-group")
    public void handleTransactionRejected(TransactionEvent transactionEvent) {
        System.out.println("‚ùå Transaction rejet√©e re√ßue : ID " + transactionEvent.getIdTransaction());

        Optional<Transaction> transactionOpt = transactionRepository.findById(transactionEvent.getIdTransaction());
        if (transactionOpt.isPresent()) {
            Transaction transaction = transactionOpt.get();
            transaction.setEtat(EtatTransaction.REJET√âE);
            transactionRepository.save(transaction);
            System.out.println("‚ùå Transaction mise √† jour en REJET√âE en base !");
        } else {
            System.err.println("‚ö†Ô∏è Transaction non trouv√©e en base pour l'ID : " + transactionEvent.getIdTransaction());
        }
    }

    @KafkaListener(topics = "transaction-rejetee-risque", groupId = "smt-group")
    public void handleTransactionRejectedRisk(TransactionEvent transactionEvent) {
        System.out.println("üö® Transaction rejet√©e pour risque re√ßue : ID " + transactionEvent.getIdTransaction());

        /* Optional<Transaction> transactionOpt = transactionRepository.findById(transactionEvent.getIdTransaction());
        if (transactionOpt.isPresent()) {
            Transaction transaction = transactionOpt.get();
            transaction.setEtat(EtatTransaction.REJET√âE_POUR_RISQUE);
            transactionRepository.save(transaction);
            System.out.println("üö® Transaction mise √† jour en REJET√âE POUR RISQUE en base !");
        } else {
            System.err.println("‚ö†Ô∏è Transaction non trouv√©e en base pour l'ID : " + transactionEvent.getIdTransaction());
        }*/
    }
}
